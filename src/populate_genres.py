"""
Script para poblar la tabla GenreCategories con todos los g√©neros de anime.

Este script inserta todos los g√©neros especificados en la tabla GenreCategories
si no existen previamente. Es seguro ejecutarlo m√∫ltiples veces.
"""

import sys
import os

# A√±adir el directorio padre al path para importar m√≥dulos
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from Utils.database import db
from Models.anime_model import GenreCategory
from app import app  # Importar la instancia de la aplicaci√≥n

def populate_genres():
    """
    Pobla la tabla GenreCategories con todos los g√©neros de anime disponibles.
    
    La funci√≥n verifica si cada g√©nero ya existe antes de insertarlo,
    evitando duplicados y errores de inserci√≥n.
    """
    
    # Lista completa de g√©neros de anime
    genres = [
        "Acci√≥n",
        "Artes Marciales", 
        "Aventuras",
        "Carreras",
        "Ciencia Ficci√≥n",
        "Comedia",
        "Demencia",
        "Demonios",
        "Deportes",
        "Drama",
        "Ecchi",
        "Escolares",
        "Espacial",
        "Fantas√≠a",
        "Harem",
        "Historico",
        "Infantil",
        "Josei",
        "Juegos",
        "Magia",
        "Mecha",
        "Militar",
        "Misterio",
        "M√∫sica",
        "Parodia",
        "Polic√≠a",
        "Psicol√≥gico",
        "Recuentos de la vida",
        "Romance",
        "Samurai",
        "Seinen",
        "Shoujo",
        "Shounen",
        "Sobrenatural",
        "Superpoderes",
        "Suspenso",
        "Terror",
        "Vampiros",
        "Yaoi",
        "Yuri"
    ]
    
    print("üé¨ Iniciando poblaci√≥n de g√©neros de anime...")
    
    # Usar contexto de aplicaci√≥n
    with app.app_context():
        try:
            # Contar g√©neros existentes
            existing_count = GenreCategory.query.count()
            print(f"üìä G√©neros existentes en BD: {existing_count}")
            
            # Insertar g√©neros que no existen
            new_genres = 0
            for genre_name in genres:
                # Verificar si el g√©nero ya existe
                existing_genre = GenreCategory.query.filter_by(name=genre_name).first()
                
                if not existing_genre:
                    # Crear nuevo g√©nero
                    new_genre = GenreCategory(name=genre_name)
                    db.session.add(new_genre)
                    new_genres += 1
                    print(f"‚ûï Agregando: {genre_name}")
                else:
                    print(f"‚è≠Ô∏è  Ya existe: {genre_name}")
            
            # Confirmar cambios en la base de datos
            if new_genres > 0:
                db.session.commit()
                print(f"‚úÖ {new_genres} nuevos g√©neros agregados exitosamente!")
            else:
                print("‚ÑπÔ∏è  Todos los g√©neros ya estaban en la base de datos.")
            
            # Mostrar total final
            final_count = GenreCategory.query.count()
            print(f"üìà Total de g√©neros en BD: {final_count}")
            
        except Exception as e:
            # Revertir cambios en caso de error
            db.session.rollback()
            print(f"‚ùå Error al poblar g√©neros: {e}")
            raise
        finally:
            # Cerrar sesi√≥n de base de datos
            db.session.close()

if __name__ == "__main__":
    populate_genres()